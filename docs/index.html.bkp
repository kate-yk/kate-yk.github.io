<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GYCO — Home</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">   <!-- Normalize browser defaults -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">    <!-- Bootstrap core -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet">  <!-- Font Awesome icons -->

  <!-- <link rel="stylesheet" href="/temp/styles/new.css" /> -->

  <style>
    :root { --accent: #0d6efd; }
    .fab { position: fixed; right:1.25rem; bottom:1.25rem; z-index:1050; width:56px; height:56px; border-radius:50%; display:inline-flex; align-items:center; justify-content:center; box-shadow:0 6px 18px rgba(13,110,253,.12); background:var(--accent); color:#fff; border:none; }
    .hero { background: linear-gradient(180deg, #f8fbff 0%, #ffffff 60%); border-radius: .5rem; padding:3rem; }
    .hero-cta .btn { min-width: 160px; }
    .focus-outline:focus { outline: 3px solid rgba(13,110,253,0.18); outline-offset:2px; }
  </style>
</head>
<body>
  <!-- shared header injected here -->
  <!-- <div data-include="/temp/public/header"></div> -->

  <!-- header.html -->
<nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom" aria-label="Main navigation">
  <div class="container-fluid">
      <a class="navbar-brand d-flex align-items-center" href="index.html" aria-label="GYCO home">
      <img src="https://via.placeholder.com/36" alt="" class="me-2" style="border-radius:6px;">
      <span class="fw-bold">GYCO</span>
      </a>
  
      <div class="d-flex ms-auto align-items-center">
      <ul class="navbar-nav me-3">
          <li class="nav-item"><a class="nav-link" href="index.html">Home</a></li>
          <li class="nav-item"><a class="nav-link" href="articles.html">Articles</a></li>
      </ul>
  
      <div class="dropdown">
          <button class="btn btn-light dropdown-toggle focus-outline" id="userMenuBtn" data-bs-toggle="dropdown" aria-expanded="false" aria-haspopup="true">
          <i class="fa-solid fa-user" aria-hidden="true"></i>
          </button>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenuBtn">
          <li><a class="dropdown-item" href="#">Profile</a></li>
          <li><a class="dropdown-item" href="#">My Articles</a></li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item" href="#">Logout</a></li>
          </ul>
      </div>
      </div>
  </div>
  </nav>

  <!-- MAIN: Hero section (no search) -->
  <main class="container my-5" role="main">
    <section class="hero p-4 p-md-5 d-flex flex-column flex-md-row align-items-center gap-4">
      <div class="flex-grow-1">
        <h1 class="display-6 fw-bold">Greater Youth Collaborative Opus</h1>
        <p class="lead text-muted mb-4">Articles, community stories, and actionable guides — created by and for youth leaders. Explore, learn, and request topics you'd like to see.</p>
        <div class="hero-cta d-flex gap-2">
          <a href="/temp/public/articles.html" class="btn btn-primary btn-lg">Explore Articles</a>
          <button class="btn btn-outline-primary btn-lg" data-bs-toggle="modal" data-bs-target="#requestModal">Request an Article</button>
        </div>
      </div>

      <div class="d-none d-md-block" style="max-width:420px;">
        <img src="https://picsum.photos/seed/hero/800/520" alt="Community reading" class="img-fluid rounded shadow-sm">
      </div>
    </section>

    <!-- Quick features / highlights -->
    <section class="row mt-5 g-4">
      <div class="col-12 col-md-4">
        <div class="card h-100 p-3">
          <h5 class="mb-1">Community Voices</h5>
          <p class="small text-muted mb-0">Read stories from peers, mentors, and local programs.</p>
        </div>
      </div>
      <div class="col-12 col-md-4">
        <div class="card h-100 p-3">
          <h5 class="mb-1">Request Topics</h5>
          <p class="small text-muted mb-0">Can't find what you need? Request a new article and we'll prioritize it.</p>
        </div>
      </div>
      <div class="col-12 col-md-4">
        <div class="card h-100 p-3">
          <h5 class="mb-1">Workshops & Events</h5>
          <p class="small text-muted mb-0">Discover upcoming workshops and calls for volunteers.</p>
        </div>
      </div>
    </section>
  </main>

  <!-- shared footer injected here -->
  <!-- <div data-include="/temp/public/footer"></div> -->
<!-- footer.html -->
<footer class="bg-white border-top mt-5">
  <div class="container py-3 d-flex flex-column flex-md-row justify-content-between align-items-center">
      <div class="small text-muted">© 2025 Greater Youth Collaborative Opus</div>
      <div>
      <a class="text-decoration-none small me-3" href="index.html">About</a>
      <a class="text-decoration-none small me-3" href="index.html#contact">Contact</a>
      <a class="text-decoration-none small" href="#">Privacy Policy</a>
      </div>
  </div>
  </footer>
  
  <!-- Floating Request button -->
  <button id="openRequestBtn" class="fab" title="Request an article" aria-label="Request an article" data-bs-toggle="modal" data-bs-target="#requestModal">
  <i class="fa-solid fa-plus" aria-hidden="true"></i>
  </button>
  
  <!-- Request Modal (shared) -->
  <div class="modal fade" id="requestModal" tabindex="-1" aria-labelledby="requestModalLabel" aria-hidden="true">
  <div class="modal-dialog">
      <form id="requestForm" class="modal-content needs-validation" novalidate>
      <header class="modal-header">
          <h5 class="modal-title" id="requestModalLabel">Request an Article</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </header>
      <div class="modal-body">
          <div class="mb-3">
          <label for="reqTitle" class="form-label">Article Title</label>
          <input id="reqTitle" name="title" class="form-control" type="text" required maxlength="150" />
          <div class="invalid-feedback">Please add a title.</div>
          </div>
          <div class="mb-3">
          <label for="reqDesc" class="form-label">Description</label>
          <textarea id="reqDesc" name="description" class="form-control" rows="4" required></textarea>
          <div class="invalid-feedback">Please add a description.</div>
          </div>
          <div class="mb-3">
          <label for="reqTags" class="form-label">Tags</label>
          <input id="reqTags" name="tags" class="form-control" placeholder="e.g. research, community"/>
          <div class="form-text">Separate tags with commas.</div>
          </div>
          <div class="mb-3">
          <label for="reqImage" class="form-label">Upload Image (optional)</label>
          <input id="reqImage" name="image" class="form-control" type="file" accept="image/*" />
          </div>
      </div>
      <footer class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button id="submitRequest" class="btn btn-primary" type="submit">Submit Request</button>
      </footer>
      </form>
  </div>
  </div>
  
  <!-- Toast for submission feedback -->
  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1080;">
  <div id="submitToast" class="toast align-items-center text-white bg-success border-0" role="status" aria-live="polite" aria-atomic="true">
      <div class="d-flex">
      <div class="toast-body">Request submitted.</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
  </div>
  </div>
  

  <script>
    (function () {
      // Request form handling (demo)
      const requestForm = document.getElementById('requestForm');
      const submitToast = new bootstrap.Toast(document.getElementById('submitToast'));
      requestForm.addEventListener('submit', function (e) {
        e.preventDefault();
        if (!requestForm.checkValidity()) {
          requestForm.classList.add('was-validated');
          return;
        }
        // demo payload
        const fd = new FormData(requestForm);
        console.log('Request payload', {
          title: fd.get('title'),
          description: fd.get('description'),
          tags: (fd.get('tags') || '').split(',').map(s=>s.trim()).filter(Boolean),
          time: new Date().toISOString()
        });
        const modal = bootstrap.Modal.getInstance(document.getElementById('requestModal'));
        if (modal) modal.hide();
        requestForm.reset();
        requestForm.classList.remove('was-validated');
        submitToast.show();
      });
    })();
  </script>
  <!-- include.js must come after page content (it injects header/footer and applies accent) -->
  <!-- <script src="/temp/src/include.js"></script> -->
  <script>
    
(function () {
'use strict';

// Helper: base URL where this script lives
function getScriptBase() {
    const script = document.currentScript;
    if (!script) {
    const scripts = Array.from(document.getElementsByTagName('script'));
    for (let i = scripts.length - 1; i >= 0; i--) {
        const s = scripts[i];
        if (s.src && s.src.indexOf('include.js') !== -1) {
        return s.src.replace(/\/[^\/]*$/, '/');
        }
    }
    return '/';
    }
    return script.src.replace(/\/[^\/]*$/, '/');
}

// Resolve url relative to base; handle absolute and origin-root paths
function resolveUrl(base, path) {
    try {
    if (/^(https?:)?\/\//i.test(path)) return path;
    if (path.startsWith('/')) return window.location.origin + path;
    return new URL(path, base).href;
    } catch (e) {
    console.warn('include.js resolveUrl error', e, base, path);
    return path;
    }
}

function ensureHtmlExt(path) {
    if (/\.[a-z0-9]+$/i.test(path)) return path;
    return path.replace(/\/$/, '') + '.html';
}

async function fetchAndInject(url, node) {
    try {
    const res = await fetch(url, { cache: 'no-cache' });
    if (!res.ok) {
        console.warn(`include.js: failed to fetch ${url} (${res.status})`);
        node.innerHTML = `<!-- include failed: ${url} (${res.status}) -->`;
        return;
    }
    const text = await res.text();
    node.innerHTML = text;
    } catch (err) {
    console.error('include.js fetch error:', err, url);
    node.innerHTML = `<!-- include error: ${err && err.message ? err.message : String(err)} -->`;
    }
}

// Parse a hex color (#fff or #ffffff) to "r, g, b" string or return null
function hexToRgbString(hex) {
    if (!hex) return null;
    let h = String(hex).trim().replace('#', '');
    if (h.length === 3) h = h.split('').map(c => c + c).join('');
    if (!/^[0-9a-f]{6}$/i.test(h)) return null;
    const r = parseInt(h.substring(0, 2), 16);
    const g = parseInt(h.substring(2, 4), 16);
    const b = parseInt(h.substring(4, 6), 16);
    return `${r}, ${g}, ${b}`;
}

// Parse "rgb(...)" or "rgba(...)" and return "r, g, b" or null
function rgbStringToRgb(rgbStr) {
    if (!rgbStr) return null;
    const m = rgbStr.match(/rgba?\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})/i);
    if (!m) return null;
    return `${parseInt(m[1],10)}, ${parseInt(m[2],10)}, ${parseInt(m[3],10)}`;
}

// Read computed --accent and set Bootstrap vars accordingly
function syncBootstrapAccentFromCss() {
    let accentRaw = '';
    try {
    accentRaw = (getComputedStyle(document.documentElement).getPropertyValue('--accent') || '').trim();
    } catch (e) {
    accentRaw = '';
    }

    // If accent is provided as hex (with or without #)
    let rgb = null;
    if (accentRaw) {
    // try rgb(...) form first
    rgb = rgbStringToRgb(accentRaw);
    if (!rgb) {
        // try hex: accept '#fff', 'fff', '#ffffff', 'ffffff'
        const hexMatch = accentRaw.match(/#?[0-9a-f]{3}([0-9a-f]{3})?$/i);
        if (hexMatch) {
        // normalize to include leading '#'
        const normalized = accentRaw.trim().replace(/['"]/g, '');
        const withHash = normalized.startsWith('#') ? normalized : ('#' + normalized);
        rgb = hexToRgbString(withHash);
        }
    }
    }

    // If we couldn't parse, do nothing (Bootstrap will use its defaults)
    if (!rgb) {
    // Optionally: if you want, you can fallback to a color here,
    // but per your request we respect whatever CSS defines and do not override.
    return;
    }

    // Set the CSS variables so Bootstrap picks them up
    document.documentElement.style.setProperty('--bs-primary', accentRaw || '');
    document.documentElement.style.setProperty('--bs-primary-rgb', rgb);
    // (also set --accent to normalized raw if you want to keep it identical)
    // document.documentElement.style.setProperty('--accent', accentRaw);
}

async function init() {
    // Sync accent first so any injected content that renders immediately will use the color
    syncBootstrapAccentFromCss();

    const base = getScriptBase();
    const nodes = document.querySelectorAll('[data-include]');
    if (!nodes.length) return;

    for (const node of nodes) {
    let val = node.getAttribute('data-include') || '';
    val = val.trim();
    if (!val) continue;

    if (!val.includes('/') && !val.includes('.')) {
        const filename = ensureHtmlExt(val);
        const url = resolveUrl(base, filename);
        await fetchAndInject(url, node);
        continue;
    }

    let candidate = val;
    if (!/\.[a-z0-9]+$/i.test(candidate)) candidate = ensureHtmlExt(candidate);
    const url = resolveUrl(base, candidate);
    await fetchAndInject(url, node);
    }

    // mark nav active if present
    try {
    const current = location.pathname.split('/').pop() || 'index.html';
    document.querySelectorAll('nav .nav-link').forEach(a => {
        const href = a.getAttribute('href');
        if (!href) return;
        if ((href === 'index.html' && (current === '' || current === 'index.html')) || href === current) {
        a.classList.add('active');
        } else {
        a.classList.remove('active');
        }
    });
    } catch (e) { /* ignore */ }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
} else {
    init();
}

})();
  
  </script>
</body>
</html>
