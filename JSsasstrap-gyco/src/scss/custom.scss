// static/temp/scss/custom.scss
// Use bootstrap's main entry so internal ordering is correct.
// We pass a few variable overrides via the `with` block.

// NOTE: We no longer @use Bootstrap's SCSS here because that makes the Sass
// compiler parse node_modules/bootstrap and produce deprecation warnings.
// Instead include Bootstrap's compiled CSS (bootstrap.min.css) in your HTML
// or JS bundler, then load this compiled custom.css after it so your CSS
// variables and small overrides take effect.

@use "bootstrap/scss/bootstrap" with ( // implies @charset "utf-8";
  // $primary: #910dfd,
  // $primary: #6610f2, // indigo
  $primary: #198754, // green
  // $primary: #0dcaf0, // cyan
  // $primary: #910dfd,
  // $primary: var(--bs-indigo),
  // $primary-rgb: #ffffff,
  // $body-color: #212529,
  // $body-bg: #fff,
);


/* lightweight runtime CSS variables (override Bootstrap's CSS vars if needed) */
// :root {
//   --accent: #0d6efd;
//   --bs-primary: var(--accent);
//   --bs-primary-rgb: 13, 110, 253;
// }



/* small project-specific rules (keep minimal & focused) */
// dsadsad
.focus-outline:focus-visible {
  outline: none;
  border-color: var(--bs-primary);
  box-shadow: 0 0 0 .25rem rgba(var(--bs-primary-rgb), .25);
  border-radius: .25rem;
}

.hero-img {
  width: 100%;
  max-width: 420px;
  height: auto;
  display: block;
  object-fit: cover;
  border-radius: .5rem;
}

.img-shadow { box-shadow: 0 .25rem .75rem rgba(0,0,0,.06); }

/* Keep Sass usage minimal - if you later need mixins,
   import only your small helper module(s) (not Bootstrap's full source). */

/* If you need a few tiny mixins from Bootstrap in your rules, you can call them:
   e.g. @include bootstrap.helpers.reset-list; 
   but avoid bloating - prefer utility classes. */
